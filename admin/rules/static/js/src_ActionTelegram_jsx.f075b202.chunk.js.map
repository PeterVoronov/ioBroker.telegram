{"version":3,"sources":["GenericBlock.jsx","ActionTelegram.jsx"],"names":[],"mappings":"0MAAA,MAAM,CAAa,CAEnB,CAEA,MAAe,E,WCDf,KAAM,GAAe,OAAO,cAAgB,EAE5C,MAAM,SAAuB,EAAa,CACtC,YAAY,EAAO,CACf,MAAM,EAAO,EAAe,cAAc,CAAC,EAC3C,KAAK,cAAgB,CAAC,CAC1B,CAEA,MAAO,SAAQ,EAAQ,EAAS,CAC5B,GAAI,GAAQ,GAAO,MAAQ,IAAI,QAAQ,KAAM,KAAK,EAClD,MAAK,GAIM,eAAe,GAAQ;AAAA,sBAClB,EAAO,UAAW,IAAQ,IAAI,QAAQ,KAAM,KAAK,KAAK,EAAa,kBAAkB,CAAO;AAAA,oBAC9F,EAAO,2BAA2B,EAAO;AAAA,YACjD,EAAO,sBAAsB,EAAO,MAAQ,EAAO,OAAS,IAAM,WAAY,GAAO,MAAQ,IAAI,QAAQ,KAAM,KAAK,yBAAyB,EAAO,OAAS,eAAe,EAAO,UAN9K;AAAA,kBACD,EAAO,kCAOrB,CAEA,YAAY,EAAc,CACtB,MAAO,GAAG,SAAO,OAAO,KAAK,EAAa,KAAK,MACnD,CAEA,eAAe,EAAO,EAAM,CACpB,IAAS,YACT,KAAK,UAAU,CAAK,CAE5B,CAEA,UAAU,EAAU,CAGhB,GAFA,EAAW,GAAY,KAAK,MAAM,SAAS,UAAY,aACvD,KAAK,cAAc,GAAY,KAAK,cAAc,IAAa,KAAK,MAAM,OAAO,SAAS,EAAW,oBAAoB,EACrH,CAAC,KAAK,MAAM,SAAS,IACrB,MAAO,MAAK,SAAS,CACjB,OAAQ,CACJ,CACI,WAAY,eACZ,QAAS,WACT,UAAW,YACX,aAAc,aACd,KAAM,UACV,EACA,CACI,WAAY,eACZ,KAAM,OACN,QAAS,CAAC,CAAE,MAAO,aAAc,MAAO,YAAa,CAAC,EACtD,aAAc,GACd,UAAW,OACf,EACA,CACI,WAAY,mBACZ,KAAM,OACN,aAAc,QACd,UAAW,GACX,UAAW,OACf,CACJ,CACJ,EAAG,IAAM,MAAM,YAAY,CAAC,EAGhC,KAAK,cAAc,GACd,KAAK,GAAS,CACX,GAAI,CACA,EAAQ,WAAO,IAAM,KAAK,MAAM,EAAM,GAAG,EAAI,KAC7C,EAAQ,GAAS,OAAO,KAAK,CAAK,EAAE,IAAI,GAAS,EAAC,MAAO,EAAM,GAAM,UAAY,EAAM,GAAM,UAAW,MAAO,CAAI,EAAE,EACrH,EAAQ,GAAS,CAAC,EAClB,EAAM,QAAQ,CAAC,MAAO,MAAO,MAAO,EAAE,CAAC,CAC3C,OAAS,EAAP,CACE,EAAQ,CAAC,CAAC,MAAO,MAAO,MAAO,EAAE,CAAC,CACtC,CAEA,KAAK,SAAS,CACV,OAAQ,CACJ,CACI,WAAY,iBACZ,QAAS,WACT,UAAW,YACX,aAAc,aACd,KAAM,UACV,EACA,CACI,WAAY,eACZ,KAAM,OACN,QAAS,EACT,aAAc,IACd,UAAW,OACf,EACA,CACI,WAAY,mBACZ,KAAM,OACN,aAAc,QACd,UAAW,GACX,UAAW,OACf,CACJ,CACJ,EAAG,IAAM,MAAM,YAAY,CAAC,CAChC,CAAC,CACT,CAEA,YAAY,EAAS,CACjB,KAAK,UAAU,CACnB,CAEA,MAAO,gBAAgB,CACnB,MAAO,CACH,WAAY,UACZ,KAAM,WACN,GAAI,iBACJ,QAAS,WACT,MAAO,6BACP,WAAY,uGAChB,CACJ,CAEA,SAAU,CACN,MAAO,GAAe,cAAc,CACxC,CACJ,CAEA,MAAe,C","file":"static/js/src_ActionTelegram_jsx.f075b202.chunk.js","sourcesContent":["class GenericBlock {\r\n\r\n}\r\n\r\nexport default GenericBlock;","import WidgetGenericBlock from './GenericBlock';\r\nimport { I18n } from '@iobroker/adapter-react-v5';\r\n\r\nconst GenericBlock = window.GenericBlock || WidgetGenericBlock;\r\n\r\nclass ActionTelegram extends GenericBlock {\r\n    constructor(props) {\r\n        super(props, ActionTelegram.getStaticData());\r\n        this.cachePromises = {};\r\n    }\r\n\r\n    static compile(config, context) {\r\n        let text = (config.text || '').replace(/\"/g, '\\\\\"');\r\n        if (!text) {\r\n            return `// no text defined\r\n_sendToFrontEnd(${config._id}, {text: 'No text defined'});`;\r\n        } else {\r\n            return `// Telegram ${text || ''}\r\n\\t\\tconst subActionVar${config._id} = \"${(text || '').replace(/\"/g, '\\\\\"')}\"${GenericBlock.getReplacesInText(context)};\r\n\\t\\t_sendToFrontEnd(${config._id}, {text: subActionVar${config._id}});\r\n\\t\\tsendTo(\"${config.instance}\", \"send\", ${config.user && config.user !== '_' ? `{user: \"${(config.user || '').replace(/\"/g, '\\\\\"')}\", text: subActionVar${config._id}}` : `subActionVar${config._id}`});`;\r\n        }\r\n    }\r\n\r\n    renderDebug(debugMessage) {\r\n        return `${I18n.t('Sent:')} ${debugMessage.data.text}`;\r\n    }\r\n\r\n    onValueChanged(value, attr) {\r\n        if (attr === 'instance') {\r\n            this._setUsers(value);\r\n        }\r\n    }\r\n\r\n    _setUsers(instance) {\r\n        instance = instance || this.state.settings.instance || 'telegram.0';\r\n        this.cachePromises[instance] = this.cachePromises[instance] || this.props.socket.getState(instance + '.communicate.users');\r\n        if (!this.state.settings._id) {\r\n            return this.setState({\r\n                inputs: [\r\n                    {\r\n                        nameRender: 'renderSelect',\r\n                        adapter: 'telegram',\r\n                        frontText: 'Instance:',\r\n                        defaultValue: 'telegram.0',\r\n                        attr: 'instance',\r\n                    },\r\n                    {\r\n                        nameRender: 'renderSelect',\r\n                        attr: 'user',\r\n                        options: [{ title: 'telegram.0', value: 'telegram.0' }],\r\n                        defaultValue: '',\r\n                        frontText: 'User:',\r\n                    },\r\n                    {\r\n                        nameRender: 'renderModalInput',\r\n                        attr: 'text',\r\n                        defaultValue: 'Hallo',\r\n                        nameBlock: '',\r\n                        frontText: 'Text:',\r\n                    }\r\n                ]\r\n            }, () => super.onTagChange());\r\n        }\r\n\r\n        this.cachePromises[instance]\r\n            .then(users => {\r\n                try {\r\n                    users = users?.val ? JSON.parse(users.val) : null;\r\n                    users = users && Object.keys(users).map(user => ({title: users[user].userName || users[user].firstName, value: user}));\r\n                    users = users || [];\r\n                    users.unshift({title: 'all', value: ''});\r\n                } catch (e) {\r\n                    users = [{title: 'all', value: ''}];\r\n                }\r\n\r\n                this.setState({\r\n                    inputs: [\r\n                        {\r\n                            nameRender: 'renderInstance',\r\n                            adapter: 'telegram',\r\n                            frontText: 'Instance:',\r\n                            defaultValue: 'telegram.0',\r\n                            attr: 'instance',\r\n                        },\r\n                        {\r\n                            nameRender: 'renderSelect',\r\n                            attr: 'user',\r\n                            options: users,\r\n                            defaultValue: '_',\r\n                            frontText: 'User:',\r\n                        },\r\n                        {\r\n                            nameRender: 'renderModalInput',\r\n                            attr: 'text',\r\n                            defaultValue: 'Hallo',\r\n                            nameBlock: '',\r\n                            frontText: 'Text:',\r\n                        }\r\n                    ]\r\n                }, () => super.onTagChange());\r\n            });\r\n    }\r\n\r\n    onTagChange(tagCard) {\r\n        this._setUsers();\r\n    }\r\n\r\n    static getStaticData() {\r\n        return {\r\n            acceptedBy: 'actions',\r\n            name: 'Telegram',\r\n            id: 'ActionTelegram',\r\n            adapter: 'telegram',\r\n            title: 'Sends message via telegram',\r\n            helpDialog: 'You can use %s in the text to display current trigger value or %id to display the triggered object ID'\r\n        }\r\n    }\r\n\r\n    getData() {\r\n        return ActionTelegram.getStaticData();\r\n    }\r\n}\r\n\r\nexport default ActionTelegram;\r\n"],"sourceRoot":""}
{"version":3,"sources":["GenericBlock.jsx","ActionTelegram.jsx"],"names":["GenericBlock","ActionTelegram","props","config","context","text","debugMessage","value","attr","instance","users","user","e","tagCard"],"mappings":"0MAAA,MAAMA,CAAa,CAEnB,CAEA,MAAeA,E,WCDf,MAAM,EAAe,OAAO,cAAgB,EAE5C,MAAMC,UAAuB,CAAa,CACtC,YAAYC,EAAO,CACf,MAAMA,EAAOD,EAAe,cAAc,CAAC,EAC3C,KAAK,cAAgB,CAAC,CAC1B,CAEA,OAAO,QAAQE,EAAQC,EAAS,CAC5B,IAAIC,GAAQF,EAAO,MAAQ,IAAI,QAAQ,KAAM,KAAK,EAClD,OAAKE,EAIM,eAAeA,GAAQ;AAAA,sBAClBF,EAAO,WAAWE,GAAQ,IAAI,QAAQ,KAAM,KAAK,KAAK,EAAa,kBAAkBD,CAAO;AAAA,oBAC9FD,EAAO,2BAA2BA,EAAO;AAAA,YACjDA,EAAO,sBAAsBA,EAAO,MAAQA,EAAO,OAAS,IAAM,YAAYA,EAAO,MAAQ,IAAI,QAAQ,KAAM,KAAK,yBAAyBA,EAAO,OAAS,eAAeA,EAAO,UAN9K;AAAA,kBACDA,EAAO,kCAOrB,CAEA,YAAYG,EAAc,CACtB,MAAO,GAAG,SAAO,OAAO,KAAKA,EAAa,KAAK,MACnD,CAEA,eAAeC,EAAOC,EAAM,CACpBA,IAAS,YACT,KAAK,UAAUD,CAAK,CAE5B,CAEA,UAAUE,EAAU,CAGhB,GAFAA,EAAWA,GAAY,KAAK,MAAM,SAAS,UAAY,aACvD,KAAK,cAAcA,GAAY,KAAK,cAAcA,IAAa,KAAK,MAAM,OAAO,SAAS,GAAGA,qBAA4B,EACrH,CAAC,KAAK,MAAM,SAAS,IACrB,OAAO,KAAK,SAAS,CACjB,OAAQ,CACJ,CACI,WAAY,eACZ,QAAS,WACT,UAAW,YACX,aAAc,aACd,KAAM,UACV,EACA,CACI,WAAY,eACZ,KAAM,OACN,QAAS,CAAC,CAAE,MAAO,aAAc,MAAO,YAAa,CAAC,EACtD,aAAc,GACd,UAAW,OACf,EACA,CACI,WAAY,mBACZ,KAAM,OACN,aAAc,QACd,UAAW,GACX,UAAW,OACf,CACJ,CACJ,EAAG,IAAM,MAAM,YAAY,CAAC,EAGhC,KAAK,cAAcA,GACd,KAAKC,GAAS,CACX,GAAI,CACAA,EAAQA,GAAA,MAAAA,EAAO,IAAM,KAAK,MAAMA,EAAM,GAAG,EAAI,KAC7CA,EAAQA,GAAS,OAAO,KAAKA,CAAK,EAAE,IAAIC,IAAS,CAAC,MAAOD,EAAMC,GAAM,UAAYD,EAAMC,GAAM,UAAW,MAAOA,CAAI,EAAE,EACrHD,EAAQA,GAAS,CAAC,EAClBA,EAAM,QAAQ,CAAC,MAAO,MAAO,MAAO,EAAE,CAAC,CAC3C,OAASE,EAAP,CACEF,EAAQ,CAAC,CAAC,MAAO,MAAO,MAAO,EAAE,CAAC,CACtC,CAEA,KAAK,SAAS,CACV,OAAQ,CACJ,CACI,WAAY,iBACZ,QAAS,WACT,UAAW,YACX,aAAc,aACd,KAAM,UACV,EACA,CACI,WAAY,eACZ,KAAM,OACN,QAASA,EACT,aAAc,IACd,UAAW,OACf,EACA,CACI,WAAY,mBACZ,KAAM,OACN,aAAc,QACd,UAAW,GACX,UAAW,OACf,CACJ,CACJ,EAAG,IAAM,MAAM,YAAY,CAAC,CAChC,CAAC,CACT,CAEA,YAAYG,EAAS,CACjB,KAAK,UAAU,CACnB,CAEA,OAAO,eAAgB,CACnB,MAAO,CACH,WAAY,UACZ,KAAM,WACN,GAAI,iBACJ,QAAS,WACT,MAAO,6BACP,WAAY,uGAChB,CACJ,CAEA,SAAU,CACN,OAAOZ,EAAe,cAAc,CACxC,CACJ,CAEA,MAAeA,C","file":"static/js/src_ActionTelegram_jsx.96d464bf.chunk.js","sourcesContent":["class GenericBlock {\n\n}\n\nexport default GenericBlock;","import WidgetGenericBlock from './GenericBlock';\nimport { I18n } from '@iobroker/adapter-react-v5';\n\nconst GenericBlock = window.GenericBlock || WidgetGenericBlock;\n\nclass ActionTelegram extends GenericBlock {\n    constructor(props) {\n        super(props, ActionTelegram.getStaticData());\n        this.cachePromises = {};\n    }\n\n    static compile(config, context) {\n        let text = (config.text || '').replace(/\"/g, '\\\\\"');\n        if (!text) {\n            return `// no text defined\n_sendToFrontEnd(${config._id}, {text: 'No text defined'});`;\n        } else {\n            return `// Telegram ${text || ''}\n\\t\\tconst subActionVar${config._id} = \"${(text || '').replace(/\"/g, '\\\\\"')}\"${GenericBlock.getReplacesInText(context)};\n\\t\\t_sendToFrontEnd(${config._id}, {text: subActionVar${config._id}});\n\\t\\tsendTo(\"${config.instance}\", \"send\", ${config.user && config.user !== '_' ? `{user: \"${(config.user || '').replace(/\"/g, '\\\\\"')}\", text: subActionVar${config._id}}` : `subActionVar${config._id}`});`;\n        }\n    }\n\n    renderDebug(debugMessage) {\n        return `${I18n.t('Sent:')} ${debugMessage.data.text}`;\n    }\n\n    onValueChanged(value, attr) {\n        if (attr === 'instance') {\n            this._setUsers(value);\n        }\n    }\n\n    _setUsers(instance) {\n        instance = instance || this.state.settings.instance || 'telegram.0';\n        this.cachePromises[instance] = this.cachePromises[instance] || this.props.socket.getState(`${instance}.communicate.users`);\n        if (!this.state.settings._id) {\n            return this.setState({\n                inputs: [\n                    {\n                        nameRender: 'renderSelect',\n                        adapter: 'telegram',\n                        frontText: 'Instance:',\n                        defaultValue: 'telegram.0',\n                        attr: 'instance',\n                    },\n                    {\n                        nameRender: 'renderSelect',\n                        attr: 'user',\n                        options: [{ title: 'telegram.0', value: 'telegram.0' }],\n                        defaultValue: '',\n                        frontText: 'User:',\n                    },\n                    {\n                        nameRender: 'renderModalInput',\n                        attr: 'text',\n                        defaultValue: 'Hallo',\n                        nameBlock: '',\n                        frontText: 'Text:',\n                    }\n                ]\n            }, () => super.onTagChange());\n        }\n\n        this.cachePromises[instance]\n            .then(users => {\n                try {\n                    users = users?.val ? JSON.parse(users.val) : null;\n                    users = users && Object.keys(users).map(user => ({title: users[user].userName || users[user].firstName, value: user}));\n                    users = users || [];\n                    users.unshift({title: 'all', value: ''});\n                } catch (e) {\n                    users = [{title: 'all', value: ''}];\n                }\n\n                this.setState({\n                    inputs: [\n                        {\n                            nameRender: 'renderInstance',\n                            adapter: 'telegram',\n                            frontText: 'Instance:',\n                            defaultValue: 'telegram.0',\n                            attr: 'instance',\n                        },\n                        {\n                            nameRender: 'renderSelect',\n                            attr: 'user',\n                            options: users,\n                            defaultValue: '_',\n                            frontText: 'User:',\n                        },\n                        {\n                            nameRender: 'renderModalInput',\n                            attr: 'text',\n                            defaultValue: 'Hallo',\n                            nameBlock: '',\n                            frontText: 'Text:',\n                        }\n                    ]\n                }, () => super.onTagChange());\n            });\n    }\n\n    onTagChange(tagCard) {\n        this._setUsers();\n    }\n\n    static getStaticData() {\n        return {\n            acceptedBy: 'actions',\n            name: 'Telegram',\n            id: 'ActionTelegram',\n            adapter: 'telegram',\n            title: 'Sends message via telegram',\n            helpDialog: 'You can use %s in the text to display current trigger value or %id to display the triggered object ID'\n        }\n    }\n\n    getData() {\n        return ActionTelegram.getStaticData();\n    }\n}\n\nexport default ActionTelegram;\n"],"sourceRoot":""}
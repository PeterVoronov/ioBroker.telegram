{"version":3,"file":"static/js/src_Components_jsx.1640c0c1.chunk.js","mappings":"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","sources":["TelegramComponent.jsx","Components.jsx"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport {\n    LinearProgress, Table, TableBody,\n    TableCell, TableContainer, TableHead,\n    TableRow, Paper, Checkbox, IconButton,\n} from '@mui/material';\nimport { Delete as IconDelete } from '@mui/icons-material';\n// important to make from package and not from some children.\n// invalid\n// import ConfigGeneric from '@iobroker/adapter-react-v5/ConfigGeneric';\n// valid\nimport { Confirm, I18n } from '@iobroker/adapter-react-v5';\nimport { ConfigGeneric } from '@iobroker/json-config';\n\nclass TelegramComponent extends ConfigGeneric {\n    constructor(props) {\n        super(props);\n        this.state = {\n            alive: false,\n            initialized: false,\n            users: [],\n            confirm: null,\n        };\n    }\n\n    componentDidMount() {\n        super.componentDidMount();\n\n        this.props.socket.getState(`system.adapter.telegram.${this.props.instance}.alive`)\n            .then(async state => {\n                if (state && state.val) {\n                    this.setState({ alive: true }, () => this.readData());\n                } else {\n                    this.setState({ alive: false });\n                }\n\n                await this.props.socket.subscribeState(`system.adapter.telegram.${this.props.instance}.alive`, this.onAliveChanged);\n            });\n    }\n\n    readData() {\n        this.props.socket.sendTo(`telegram.${this.props.instance}`, 'adminuser', null)\n            .then(obj => {  // get admin user\n                const users = [];\n                for (const id in obj) {\n                    const names = [];\n                    obj[id].userName  && names.push(obj[id].userName);\n                    obj[id].firstName && names.push(obj[id].firstName);\n                    users.push({\n                        id,\n                        names: names.join(' / '),\n                        sysMessages: obj[id].sysMessages,\n                    });\n                }\n                this.setState({ users, initialized: true });\n            });\n    }\n\n    async componentWillUnmount() {\n        await this.props.socket.unsubscribeState(`system.adapter.telegram.${this.props.instance}.alive`, this.onAliveChanged);\n    }\n\n    onAliveChanged = (id, state) => {\n        const alive = state ? state.val : false;\n        if (alive !== this.state.alive) {\n            this.setState({ alive }, () => {\n                if (alive && !this.state.initialized) {\n                    this.readData();\n                }\n            });\n        }\n    };\n\n    onSysMessageChange(id) {\n        const pos = this.state.users.findIndex(item => item.id === id);\n        if (pos !== -1) {\n            const checked = !this.state.users[pos].sysMessages;\n\n            this.props.socket.sendTo(`telegram.${this.props.instance}`, 'systemMessages', { itemId: id, checked })\n                .then(obj => {\n                    if (obj === id) {\n                        const users = JSON.parse(JSON.stringify(this.state.users));\n                        const pos = users.findIndex(item => item.id === id);\n                        if (pos !== -1) {\n                            users[pos].sysMessages = checked;\n                            this.setState({ users });\n                        }\n                    }\n                });\n        }\n    }\n\n    onDelete(id) {\n        this.props.socket.sendTo(`telegram.${this.props.instance}`, 'delUser', id)\n            .then(obj => {\n                if (obj === id) {\n                    const users = JSON.parse(JSON.stringify(this.state.users));\n                    const pos = users.findIndex(item => item.id === id);\n                    if (pos !== -1) {\n                        users.splice(pos, 1);\n                        this.setState({ users });\n                    }\n                }\n            });\n    }\n\n    renderConfirmDialog() {\n        if (this.state.confirm) {\n            return <Confirm\n                onClose={result => {\n                    const id = this.state.confirm;\n                    this.setState({ confirm: null }, () => result && this.onDelete(id));\n                }}\n            />;\n        } else {\n            return null;\n        }\n    }\n\n    renderItem() {\n        if (!this.state.alive && !this.state.initialized) {\n            return <div>{I18n.t('custom_telegram_not_alive')}</div>;\n        } else if (!this.state.initialized) {\n            return <LinearProgress />;\n        } else {\n            return <div style={{ width: '100%'}}>\n                <h4>{I18n.t('custom_telegram_title')}</h4>\n                <TableContainer component={Paper} style={{ width: '100%' }}>\n                    <Table style={{ width: '100%' }} size=\"small\">\n                        <TableHead>\n                            <TableRow>\n                                <TableCell>{I18n.t('custom_telegram_id')}</TableCell>\n                                <TableCell>{I18n.t('custom_telegram_name')}</TableCell>\n                                <TableCell>{I18n.t('custom_telegram_sys_messages')}</TableCell>\n                                <TableCell></TableCell>\n                            </TableRow>\n                        </TableHead>\n                        <TableBody>\n                            {this.state.users.map(user => <TableRow\n                                key={user.id}\n                                sx={{ '&:last-child td, &:last-child th': { border: 0 } }}\n                            >\n                                <TableCell component=\"th\" scope=\"row\">{user.id}</TableCell>\n                                <TableCell>{user.names}</TableCell>\n                                <TableCell>\n                                    <Checkbox\n                                        disabled={!this.state.alive}\n                                        checked={!!user.sysMessages}\n                                        onClick={() => this.onSysMessageChange(user.id)}\n                                    />\n                                </TableCell>\n                                <TableCell>\n                                    <IconButton\n                                        disabled={!this.state.alive}\n                                        onClick={() => this.setState({ confirm: user.id })}\n                                    >\n                                        <IconDelete />\n                                    </IconButton>\n                                </TableCell>\n                            </TableRow>)}\n                        </TableBody>\n                    </Table>\n                </TableContainer>\n                {this.renderConfirmDialog()}\n            </div>;\n        }\n    }\n}\n\nTelegramComponent.propTypes = {\n    socket: PropTypes.object.isRequired,\n    themeType: PropTypes.string,\n    themeName: PropTypes.string,\n    style: PropTypes.object,\n    data: PropTypes.object.isRequired,\n    attr: PropTypes.string,\n    schema: PropTypes.object,\n    onError: PropTypes.func,\n    onChange: PropTypes.func,\n};\n\nexport default TelegramComponent;\n","import TelegramComponent from './TelegramComponent';\n\nexport default { TelegramComponent };"],"names":["TelegramComponent","props","id","state","alive","obj","users","names","pos","item","checked","result","user"],"sourceRoot":""}
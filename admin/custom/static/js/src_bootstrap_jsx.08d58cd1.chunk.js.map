{"version":3,"sources":["TelegramComponent.jsx","App.jsx","theme.js","bootstrap.jsx"],"names":[],"mappings":"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","file":"static/js/src_bootstrap_jsx.08d58cd1.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { withStyles } from '@mui/styles';\r\n\r\nimport { LinearProgress, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Paper, Checkbox, IconButton } from '@mui/material';\r\nimport { Delete as IconDelete } from '@mui/icons-material';\r\n// important to make from package and not from some children.\r\n// invalid\r\n// import ConfigGeneric from '@iobroker/adapter-react-v5/ConfigGeneric';\r\n// valid\r\nimport {ConfigGeneric, Confirm, i18n as I18n} from '@iobroker/adapter-react-v5';\r\n\r\nconst styles = () => ({\r\n    table: {\r\n        minWidth: 400\r\n    },\r\n    header: {\r\n        fontSize: 16,\r\n        fontWeight: 'bold'\r\n    }\r\n});\r\n\r\nclass TelegramComponent extends ConfigGeneric {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            alive: false,\r\n            initialized: false,\r\n            users: [],\r\n            confirm: null,\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        super.componentDidMount();\r\n\r\n        this.props.socket.getState(`system.adapter.telegram.${this.props.instance}.alive`)\r\n            .then(async state => {\r\n                if (state && state.val) {\r\n                    this.setState({ alive: true }, () => this.readData());\r\n                } else {\r\n                    this.setState({ alive: false });\r\n                }\r\n\r\n                await this.props.socket.subscribeState(`system.adapter.telegram.${this.props.instance}.alive`, this.onAliveChanged);\r\n            });\r\n    }\r\n\r\n    readData() {\r\n        this.props.socket.sendTo('telegram.' + this.props.instance, 'adminuser', null)\r\n            .then(obj => {  // get admin user\r\n                const users = [];\r\n                for (const id in obj) {\r\n                    const names = [];\r\n                    obj[id].userName  && names.push(obj[id].userName);\r\n                    obj[id].firstName && names.push(obj[id].firstName);\r\n                    users.push({\r\n                        id,\r\n                        name: names.join(' / '),\r\n                        sysMessages: obj[id].sysMessages,\r\n                    });\r\n                }\r\n                this.setState({ users, initialized: true });\r\n            });\r\n    }\r\n\r\n    async componentWillUnmount() {\r\n        await this.props.socket.subscribeState(`system.adapter.telegram.${this.props.instance}.alive`, this.onAliveChanged);\r\n    }\r\n\r\n    onAliveChanged = (id, state) => {\r\n        const alive = state ? state.val : false;\r\n        if (alive !== this.state.alive) {\r\n            this.setState({ alive }, () => {\r\n                if (alive && !this.state.initialized) {\r\n                    this.readData();\r\n                }\r\n            });\r\n        }\r\n    };\r\n\r\n    onSysMessageChange(id) {\r\n        const pos = this.state.users.findIndex(item => item.id === id);\r\n        if (pos !== -1) {\r\n            const checked = !this.state.users[pos].sysMessages;\r\n\r\n            this.props.socket.sendTo('telegram.' + this.props.instance, 'systemMessages', { itemId: id, checked })\r\n                .then(obj => {\r\n                    if (obj === id) {\r\n                        const users = JSON.parse(JSON.stringify(this.state.users));\r\n                        const pos = users.findIndex(item => item.id === id);\r\n                        if (pos !== -1) {\r\n                            users[pos].sysMessages = checked;\r\n                            this.setState({ users });\r\n                        }\r\n                    }\r\n                });\r\n        }\r\n    }\r\n\r\n    onDelete(id) {\r\n        this.props.socket.sendTo('telegram.' + this.props.instance, 'delUser', id)\r\n            .then(obj => {\r\n                if (obj === id) {\r\n                    const users = JSON.parse(JSON.stringify(this.state.users));\r\n                    const pos = users.findIndex(item => item.id === id);\r\n                    if (pos !== -1) {\r\n                        users.splice(pos, 1);\r\n                        this.setState({ users });\r\n                    }\r\n                }\r\n            });\r\n    }\r\n\r\n    renderConfirmDialog() {\r\n        if (this.state.confirm) {\r\n            return <Confirm onClose={result => {\r\n                const id = this.state.confirm;\r\n                this.setState({ confirm: null }, () => result && this.onDelete(id));\r\n            }}/>;\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    renderItem() {\r\n        if (!this.state.alive && !this.state.initialized) {\r\n            return <div>{I18n.t('custom_telegram_not_alive')}</div>;\r\n        } else if (!this.state.initialized) {\r\n            return <LinearProgress />;\r\n        } else {\r\n            return <div style={{ width: '100%'}}>\r\n                <h4>{I18n.t('custom_telegram_title')}</h4>\r\n                <TableContainer component={Paper} style={{ width: '100%' }}>\r\n                    <Table style={{ width: '100%' }} size=\"small\">\r\n                        <TableHead>\r\n                            <TableRow>\r\n                                <TableCell>{I18n.t('custom_telegram_id')}</TableCell>\r\n                                <TableCell>{I18n.t('custom_telegram_name')}</TableCell>\r\n                                <TableCell>{I18n.t('custom_telegram_sys_messages')}</TableCell>\r\n                                <TableCell></TableCell>\r\n                            </TableRow>\r\n                        </TableHead>\r\n                        <TableBody>\r\n                            {this.state.users.map(user => <TableRow\r\n                                key={user.id}\r\n                                sx={{ '&:last-child td, &:last-child th': { border: 0 } }}\r\n                            >\r\n                                <TableCell component=\"th\" scope=\"row\">{user.id}</TableCell>\r\n                                <TableCell>{user.names}</TableCell>\r\n                                <TableCell><Checkbox disabled={!this.state.alive} checked={!!user.sysMessages} onClick={() => this.onSysMessageChange(user.id)} /></TableCell>\r\n                                <TableCell><IconButton disabled={!this.state.alive} onClick={() => this.setState({ confirm: user.id })} ><IconDelete /></IconButton></TableCell>\r\n                            </TableRow>)}\r\n                        </TableBody>\r\n                    </Table>\r\n                </TableContainer>\r\n                {this.renderConfirmDialog()}\r\n            </div>;\r\n        }\r\n    }\r\n}\r\n\r\nTelegramComponent.propTypes = {\r\n    socket: PropTypes.object.isRequired,\r\n    themeType: PropTypes.string,\r\n    themeName: PropTypes.string,\r\n    style: PropTypes.object,\r\n    className: PropTypes.string,\r\n    data: PropTypes.object.isRequired,\r\n    attr: PropTypes.string,\r\n    schema: PropTypes.object,\r\n    onError: PropTypes.func,\r\n    onChange: PropTypes.func,\r\n};\r\n\r\nexport default withStyles(styles)(TelegramComponent);","// this file used only for simulation and not used in end build\r\n\r\nimport React from 'react';\r\nimport { ThemeProvider, StyledEngineProvider } from '@mui/material/styles';\r\n\r\nimport withStyles from '@mui/styles/withStyles';\r\n\r\nimport GenericApp from '@iobroker/adapter-react-v5/GenericApp';\r\nimport I18n from '@iobroker/adapter-react-v5/i18n';\r\nimport Loader from '@iobroker/adapter-react-v5/Components/Loader';\r\n\r\nimport TelegramComponent from './TelegramComponent';\r\n\r\nconst styles = theme => ({\r\n    app: {\r\n        backgroundColor: theme.palette.background.default,\r\n        color: theme.palette.text.primary,\r\n        height: '100%',\r\n    },\r\n    item: {\r\n        padding: 50,\r\n        width: 400\r\n    }\r\n});\r\n\r\nclass App extends GenericApp {\r\n    constructor(props) {\r\n        const extendedProps = { ...props };\r\n        super(props, extendedProps);\r\n\r\n        this.state = {\r\n            data: { myCustomAttribute: 'red' },\r\n            theme: this.createTheme(),\r\n        };\r\n        const translations = {\r\n            'en': require('./i18n/en'),\r\n            'de': require('./i18n/de'),\r\n            'ru': require('./i18n/ru'),\r\n            'pt': require('./i18n/pt'),\r\n            'nl': require('./i18n/nl'),\r\n            'fr': require('./i18n/fr'),\r\n            'it': require('./i18n/it'),\r\n            'es': require('./i18n/es'),\r\n            'pl': require('./i18n/pl'),\r\n            'zh-cn': require('./i18n/zh-cn'),\r\n        };\r\n\r\n        I18n.setTranslations(translations);\r\n        I18n.setLanguage((navigator.language || navigator.userLanguage || 'en').substring(0, 2).toLowerCase());\r\n    }\r\n\r\n    render() {\r\n        if (!this.state.loaded) {\r\n            return <StyledEngineProvider injectFirst>\r\n                <ThemeProvider theme={this.state.theme}>\r\n                    <Loader theme={this.state.themeType} />\r\n                </ThemeProvider>\r\n            </StyledEngineProvider>;\r\n        }\r\n\r\n        return <StyledEngineProvider injectFirst>\r\n            <ThemeProvider theme={this.state.theme}>\r\n                <div className={this.props.classes.app}>\r\n                    <div className={this.props.classes.item}>\r\n                        <TelegramComponent\r\n                            socket={this.socket}\r\n                            themeType={this.state.themeType}\r\n                            themeName={this.state.themeName}\r\n                            attr='myCustomAttribute'\r\n                            data={this.state.data}\r\n                            onError={() => {}}\r\n                            instance={0}\r\n                            schema={{\r\n                                name: 'ConfigCustomTelegramSet/Components/TelegramComponent',\r\n                                type: 'custom',\r\n                            }}\r\n                            onChange={data => {\r\n                                this.setState({ data });\r\n                            }}\r\n                        />\r\n                    </div>\r\n                </div>\r\n            </ThemeProvider>\r\n        </StyledEngineProvider>;\r\n    }\r\n}\r\n\r\nexport default withStyles(styles)(App);","// this file used only for simulation and not used in end build\r\nimport Theme from '@iobroker/adapter-react-v5/Theme';\r\n\r\nexport default type => {\r\n    const danger = '#dd5325';\r\n    const success = '#73b6a8';\r\n    const theme = { ...Theme(type) };\r\n    if (!theme) {\r\n        return theme;\r\n    }\r\n    theme.palette.text.danger = {\r\n        color: danger,\r\n    };\r\n    theme.palette.text.success = {\r\n        color: success,\r\n    };\r\n\r\n    return theme;\r\n};","// this file used only for simulation and not used in end build\r\n\r\n/* eslint-disable */\r\nimport React from 'react';\r\nimport { createRoot } from 'react-dom/client';\r\nimport { ThemeProvider, StyledEngineProvider } from '@mui/material/styles';\r\nimport Utils from '@iobroker/adapter-react-v5/Components/Utils';\r\nimport App from './App';\r\nimport theme from './theme';\r\n\r\nwindow.adapterName = 'adapter-component-template';\r\nlet themeName = Utils.getThemeName();\r\n\r\nfunction build() {\r\n    const container = document.getElementById('root');\r\n    const root = createRoot(container);\r\n    return root.render(<React.StrictMode>\r\n        <StyledEngineProvider injectFirst>\r\n            <ThemeProvider theme={theme(themeName)}>\r\n                <App\r\n                    socket={{port: 8081}}\r\n                    onThemeChange={(_theme) => {\r\n                        themeName = _theme;\r\n                        build();\r\n                    }}\r\n                />\r\n            </ThemeProvider>\r\n        </StyledEngineProvider>\r\n    </React.StrictMode>);\r\n}\r\n\r\nbuild();"],"sourceRoot":""}
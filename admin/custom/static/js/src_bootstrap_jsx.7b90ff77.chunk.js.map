{"version":3,"sources":["TelegramComponent.jsx","App.jsx","theme.js","bootstrap.jsx"],"names":[],"mappings":"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","file":"static/js/src_bootstrap_jsx.7b90ff77.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { withStyles } from '@mui/styles';\r\n\r\nimport { Button } from '@mui/material';\r\n\r\n// important to make from package and not from some children.\r\n// invalid\r\n// import ConfigGeneric from '@iobroker/adapter-react-v5/ConfigGeneric';\r\n// valid\r\nimport { ConfigGeneric, ColorPicker } from '@iobroker/adapter-react-v5';\r\n\r\nconst styles = () => ({\r\n    table: {\r\n        minWidth: 400\r\n    },\r\n    header: {\r\n        fontSize: 16,\r\n        fontWeight: 'bold'\r\n    }\r\n});\r\n\r\nclass TelegramComponent extends ConfigGeneric {\r\n    componentDidMount() {\r\n        super.componentDidMount();\r\n\r\n        this.props.socket.getState('system.adapter.admin.0.alive')\r\n            .then(result => console.log(result));\r\n    }\r\n\r\n    buttonHandler = () => {\r\n        window.alert('button event');\r\n    };\r\n\r\n    renderItem(/*error, disabled, defaultValue*/) {\r\n        const value = ConfigGeneric.getValue(this.props.data, this.props.attr);\r\n\r\n        return <>\r\n            <Button color=\"secondary\" variant=\"contained\" onClick={this.buttonHandler}>Example Button</Button>\r\n            <ColorPicker value={value} onChange={color => {\r\n                this.onChange(this.props.attr, color);\r\n            }}/>\r\n        </>;\r\n    }\r\n}\r\n\r\nTelegramComponent.propTypes = {\r\n    socket: PropTypes.object.isRequired,\r\n    themeType: PropTypes.string,\r\n    themeName: PropTypes.string,\r\n    style: PropTypes.object,\r\n    className: PropTypes.string,\r\n    data: PropTypes.object.isRequired,\r\n    attr: PropTypes.string,\r\n    schema: PropTypes.object,\r\n    onError: PropTypes.func,\r\n    onChange: PropTypes.func,\r\n};\r\n\r\nexport default withStyles(styles)(TelegramComponent);","// this file used only for simulation and not used in end build\r\n\r\nimport React from 'react';\r\nimport { ThemeProvider, StyledEngineProvider } from '@mui/material/styles';\r\n\r\nimport withStyles from '@mui/styles/withStyles';\r\n\r\nimport GenericApp from '@iobroker/adapter-react-v5/GenericApp';\r\nimport I18n from '@iobroker/adapter-react-v5/i18n';\r\nimport Loader from '@iobroker/adapter-react-v5/Components/Loader';\r\n\r\nimport TelegramComponent from './TelegramComponent';\r\n\r\nconst styles = theme => ({\r\n    app: {\r\n        backgroundColor: theme.palette.background.default,\r\n        color: theme.palette.text.primary,\r\n        height: '100%',\r\n    },\r\n    item: {\r\n        padding: 50,\r\n        width: 400\r\n    }\r\n});\r\n\r\nclass App extends GenericApp {\r\n    constructor(props) {\r\n        const extendedProps = { ...props };\r\n        super(props, extendedProps);\r\n\r\n        this.state = {\r\n            data: { myCustomAttribute: 'red' },\r\n            theme: this.createTheme(),\r\n        };\r\n\r\n        I18n.setLanguage((navigator.language || navigator.userLanguage || 'en').substring(0, 2).toLowerCase());\r\n    }\r\n\r\n    render() {\r\n        if (!this.state.loaded) {\r\n            return <StyledEngineProvider injectFirst>\r\n                <ThemeProvider theme={this.state.theme}>\r\n                    <Loader theme={this.state.themeType} />\r\n                </ThemeProvider>\r\n            </StyledEngineProvider>;\r\n        }\r\n\r\n        return <StyledEngineProvider injectFirst>\r\n            <ThemeProvider theme={this.state.theme}>\r\n                <div className={this.props.classes.app}>\r\n                    <div className={this.props.classes.item}>\r\n                        <TelegramComponent\r\n                            socket={this.socket}\r\n                            themeType={this.state.themeType}\r\n                            themeName={this.state.themeName}\r\n                            attr='myCustomAttribute'\r\n                            data={this.state.data}\r\n                            onError={() => {}}\r\n                            schema={{\r\n                                name: 'ConfigCustomTelegramSet/Components/TelegramComponent',\r\n                                type: 'custom',\r\n                            }}\r\n                            onChange={data => {\r\n                                this.setState({ data });\r\n                            }}\r\n                        />\r\n                    </div>\r\n                </div>\r\n            </ThemeProvider>\r\n        </StyledEngineProvider>;\r\n    }\r\n}\r\n\r\nexport default withStyles(styles)(App);","// this file used only for simulation and not used in end build\r\nimport Theme from '@iobroker/adapter-react-v5/Theme';\r\n\r\nexport default type => {\r\n    const danger = '#dd5325';\r\n    const success = '#73b6a8';\r\n    const theme = { ...Theme(type) };\r\n    if (!theme) {\r\n        return theme;\r\n    }\r\n    theme.palette.text.danger = {\r\n        color: danger,\r\n    };\r\n    theme.palette.text.success = {\r\n        color: success,\r\n    };\r\n\r\n    return theme;\r\n};","// this file used only for simulation and not used in end build\r\n\r\n/* eslint-disable */\r\nimport React from 'react';\r\nimport { createRoot } from 'react-dom/client';\r\nimport { ThemeProvider, StyledEngineProvider } from '@mui/material/styles';\r\nimport Utils from '@iobroker/adapter-react-v5/Components/Utils';\r\nimport App from './App';\r\nimport theme from './theme';\r\n\r\nwindow.adapterName = 'adapter-component-template';\r\nlet themeName = Utils.getThemeName();\r\n\r\nfunction build() {\r\n    const container = document.getElementById('root');\r\n    const root = createRoot(container);\r\n    return root.render(<React.StrictMode>\r\n        <StyledEngineProvider injectFirst>\r\n            <ThemeProvider theme={theme(themeName)}>\r\n                <App\r\n                    socket={{port: 8081}}\r\n                    onThemeChange={(_theme) => {\r\n                        themeName = _theme;\r\n                        build();\r\n                    }}\r\n                />\r\n            </ThemeProvider>\r\n        </StyledEngineProvider>\r\n    </React.StrictMode>);\r\n}\r\n\r\nbuild();"],"sourceRoot":""}
{"version":3,"sources":["TelegramComponent.jsx","Components.jsx"],"names":[],"mappings":"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","file":"static/js/src_Components_jsx.6d46a5a9.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { withStyles } from '@mui/styles';\r\n\r\nimport { LinearProgress, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Paper, Checkbox, IconButton } from '@mui/material';\r\nimport { Delete as IconDelete } from '@mui/icons-material';\r\n// important to make from package and not from some children.\r\n// invalid\r\n// import ConfigGeneric from '@iobroker/adapter-react-v5/ConfigGeneric';\r\n// valid\r\nimport {ConfigGeneric, Confirm, i18n as I18n} from '@iobroker/adapter-react-v5';\r\n\r\nconst styles = () => ({\r\n    table: {\r\n        minWidth: 400\r\n    },\r\n    header: {\r\n        fontSize: 16,\r\n        fontWeight: 'bold'\r\n    }\r\n});\r\n\r\nclass TelegramComponent extends ConfigGeneric {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            alive: false,\r\n            initialized: false,\r\n            users: [],\r\n            confirm: null,\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        super.componentDidMount();\r\n\r\n        this.props.socket.getState(`system.adapter.telegram.${this.props.instance}.alive`)\r\n            .then(async state => {\r\n                if (state && state.val) {\r\n                    this.setState({ alive: true }, () => this.readData());\r\n                } else {\r\n                    this.setState({ alive: false });\r\n                }\r\n\r\n                await this.props.socket.subscribeState(`system.adapter.telegram.${this.props.instance}.alive`, this.onAliveChanged);\r\n            });\r\n    }\r\n\r\n    readData() {\r\n        this.props.socket.sendTo('telegram.' + this.props.instance, 'adminuser', null)\r\n            .then(obj => {  // get admin user\r\n                const users = [];\r\n                for (const id in obj) {\r\n                    const names = [];\r\n                    obj[id].userName  && names.push(obj[id].userName);\r\n                    obj[id].firstName && names.push(obj[id].firstName);\r\n                    users.push({\r\n                        id,\r\n                        name: names.join(' / '),\r\n                        sysMessages: obj[id].sysMessages,\r\n                    });\r\n                }\r\n                this.setState({ users, initialized: true });\r\n            });\r\n    }\r\n\r\n    async componentWillUnmount() {\r\n        await this.props.socket.subscribeState(`system.adapter.telegram.${this.props.instance}.alive`, this.onAliveChanged);\r\n    }\r\n\r\n    onAliveChanged = (id, state) => {\r\n        const alive = state ? state.val : false;\r\n        if (alive !== this.state.alive) {\r\n            this.setState({ alive }, () => {\r\n                if (alive && !this.state.initialized) {\r\n                    this.readData();\r\n                }\r\n            });\r\n        }\r\n    };\r\n\r\n    onSysMessageChange(id) {\r\n        const pos = this.state.users.findIndex(item => item.id === id);\r\n        if (pos !== -1) {\r\n            const checked = !this.state.users[pos].sysMessages;\r\n\r\n            this.props.socket.sendTo('telegram.' + this.props.instance, 'systemMessages', { itemId: id, checked })\r\n                .then(obj => {\r\n                    if (obj === id) {\r\n                        const users = JSON.parse(JSON.stringify(this.state.users));\r\n                        const pos = users.findIndex(item => item.id === id);\r\n                        if (pos !== -1) {\r\n                            users[pos].sysMessages = checked;\r\n                            this.setState({ users });\r\n                        }\r\n                    }\r\n                });\r\n        }\r\n    }\r\n\r\n    onDelete(id) {\r\n        this.props.socket.sendTo('telegram.' + this.props.instance, 'delUser', id)\r\n            .then(obj => {\r\n                if (obj === id) {\r\n                    const users = JSON.parse(JSON.stringify(this.state.users));\r\n                    const pos = users.findIndex(item => item.id === id);\r\n                    if (pos !== -1) {\r\n                        users.splice(pos, 1);\r\n                        this.setState({ users });\r\n                    }\r\n                }\r\n            });\r\n    }\r\n\r\n    renderConfirmDialog() {\r\n        if (this.state.confirm) {\r\n            return <Confirm onClose={result => {\r\n                const id = this.state.confirm;\r\n                this.setState({ confirm: null }, () => result && this.onDelete(id));\r\n            }}/>;\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    renderItem() {\r\n        if (!this.state.alive && !this.state.initialized) {\r\n            return <div>{I18n.t('custom_telegram_not_alive')}</div>;\r\n        } else if (!this.state.initialized) {\r\n            return <LinearProgress />;\r\n        } else {\r\n            return <div style={{ width: '100%'}}>\r\n                <h4>{I18n.t('custom_telegram_title')}</h4>\r\n                <TableContainer component={Paper} style={{ width: '100%' }}>\r\n                    <Table style={{ width: '100%' }} size=\"small\">\r\n                        <TableHead>\r\n                            <TableRow>\r\n                                <TableCell>{I18n.t('custom_telegram_id')}</TableCell>\r\n                                <TableCell>{I18n.t('custom_telegram_name')}</TableCell>\r\n                                <TableCell>{I18n.t('custom_telegram_sys_messages')}</TableCell>\r\n                                <TableCell></TableCell>\r\n                            </TableRow>\r\n                        </TableHead>\r\n                        <TableBody>\r\n                            {this.state.users.map(user => <TableRow\r\n                                key={user.id}\r\n                                sx={{ '&:last-child td, &:last-child th': { border: 0 } }}\r\n                            >\r\n                                <TableCell component=\"th\" scope=\"row\">{user.id}</TableCell>\r\n                                <TableCell>{user.names}</TableCell>\r\n                                <TableCell><Checkbox disabled={!this.state.alive} checked={!!user.sysMessages} onClick={() => this.onSysMessageChange(user.id)} /></TableCell>\r\n                                <TableCell><IconButton disabled={!this.state.alive} onClick={() => this.setState({ confirm: user.id })} ><IconDelete /></IconButton></TableCell>\r\n                            </TableRow>)}\r\n                        </TableBody>\r\n                    </Table>\r\n                </TableContainer>\r\n                {this.renderConfirmDialog()}\r\n            </div>;\r\n        }\r\n    }\r\n}\r\n\r\nTelegramComponent.propTypes = {\r\n    socket: PropTypes.object.isRequired,\r\n    themeType: PropTypes.string,\r\n    themeName: PropTypes.string,\r\n    style: PropTypes.object,\r\n    className: PropTypes.string,\r\n    data: PropTypes.object.isRequired,\r\n    attr: PropTypes.string,\r\n    schema: PropTypes.object,\r\n    onError: PropTypes.func,\r\n    onChange: PropTypes.func,\r\n};\r\n\r\nexport default withStyles(styles)(TelegramComponent);","import TelegramComponent from './TelegramComponent';\r\n\r\nexport default { TelegramComponent };"],"sourceRoot":""}